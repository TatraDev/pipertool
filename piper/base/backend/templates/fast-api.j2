import time

from fastapi import FastAPI, Request, status, File, UploadFile
from piper.envs import CurrentEnv

from pathlib import Path

{% for script_name in scripts.keys() %}
from {{ script_name }} import *
{% endfor %}

app = FastAPI(debug=True)

@app.post('/health_check', status_code = status.HTTP_200_OK)
async def health_check():
    return {"message": "health check"}

with CurrentEnv():
    logger.info(f'CurrentEnv')
    service = {{ service_class }}({% for k, v in service_kwargs.items() %} {{ k }}={{ v }}, {% endfor %})
    logger.info(f'service {service}')

    @app.post('/{{ function_name }}')
    async def {{ function_name }}(
        #request_model: {{ request_model }},
        file: UploadFile = File(...)
    ):
        data_b = await file.read()
        suf = Path(file.filename).suffix.lower()
        suf = suf[1:]
        logger.info('{{ function_name }} POST request ')
        result = await service.{{ function_name }}(data_b, suf)

        logger.info(f'fast_api.j2 result is {result}')
        try:
            return result
        except Exception as e:
            logger.error(f'fast_api.j2 error while recognize {e}')
